# 実行ユーザーの指定
user  nginx;

# 実行プロセスを指定
worker_processes  auto;

# 実行ファイルの最大数の指定
worker_rlimit_nofile  1024;

# エラーログの出力先とレベルを指定
error_log /var/log/nginx/error.log warn;

# 実行プロセスIDを保存するファイルを指定
pid /var/run/nginx.pid;

# クライアントからのアクセス処理に関する設定(イベント処理)
events {
  # 1ワーカーの接続数
  worker_connections  1024;

  # 複数のリクエストを同時に受け付けるか
  multi_accept on;

  # コネクションの処理方法
  ## 複数アクセスをさばくため、I/O多重化に使うシステムコールを指定
  use epoll;
}

# httpに関する設定(Webサーバーの設定)
http {
  # MIMEタイプの指定
  ## nginxがデフォルトで用意するMINEタイプと拡張子のマッピング
  include /etc/nginx/mime.types;

  # マッピングにない拡張子の時のMINEタイプの設定
  ## application/octet-streamはファイルの種類は特に気にしない
  default_type  application/octet-stream;

  # ログのフォーマットを設定
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

  # アクセスログの出力先とフォーマットの設定
  access_log  /var/log/nginx/access.log main;

  # カーネル空間でファイルの読み込みや送信を行う
  sendfile  on;

  # レスポンスヘッダーとファイルの内容をまとめて送信する
  tcp_nopush  on;

  # TCPパケットの容量がいっぱいになるのを待たずに送信する
  tcp_nodelay on;

  # エラー画面の時にNginxのバージョンを表示しない
  server_tokens off;

  # HTTPの接続時間
  keepalive_timeout 60;

  # 非アクティブクライアントのコネクションを閉じる
  reset_timedout_connection on;

  # nginxが受け取ったリクエストをバックエンドに送信
  upstream api {
    # ソケット通信を行うためpuma.sockを指定
    server unix:///var/www/tmp/sockets/puma.sock;
  }

  # 仮装サーバーの設定
  server {
    # ポートの設定
    ## default_serverを指定すると想定外のアクセスが来てもこのserverブロックで処理する
    listen 80 default_server;

    # 仮装サーバーの名前
    server_name localhost;

    # エラーログの出力先
    error_log /var/log/nginx/error.log;

    # HTTPの持続的な接続時間
    keepalive_timeout 75;

    # レスポンスヘッダーにcharset UTF-8を付与する
    charset utf-8;

    # レスポンスヘッダーに追加
    ## ブラウザーに HTTP の代わりに HTTPS を用いて通信を行うよう指示
    # add_header Strict-Transport-Security "max-age=15768000";
    ## ユーザーエージェントごとにキャッシュを分ける
    add_header Vary "User-Agent";
    ## クリックジャッキング対策
    add_header X-Frame-Options "SAMEORIGIN";
    ## XSS対策
    add_header X-XSS-Protection "1; mode=block";
    ## IEで発生するコンテンツタイプSniffing対策
    add_header X-Content-Type-Options "nosniff";

    # サーバー間のファイル転送にgzip圧縮を使用
    gzip on;

    # gzip圧縮する対象のファイルを指定
    gzip_types application/json;

    # IE6では圧縮されたファイルの展開に失敗することがあるので、その場合は圧縮しない
    gzip_disable "MSIE [1-6]\.";

    # Vary: Accept-Encoding をレスポンスヘッダに付加する
    gzip_vary on;

    # リクエストのルートディレクトリ
    root /var/www/public;

    # インデックスファイルの指定
    index index.html index.htm;

    # ルートディレクトリにアクセスした時
    location / {
      # 指定のファイルが存在するかチェック
      try_files $uri $uri.html $uri/index.html $uri =404;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    # APIにアクセスした時
    location /api/v1 {
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass http://api;
    }

    error_page  404 /index.html;
    error_page  500 502 503 504 /50x.html;
  }
}
